# English translations for nvidia-install.sh
# Copyright (C) 2025 EM-GeekLab
# This file is distributed under the same license as the nvidia-install.sh package.
#
msgid ""
msgstr ""
"Project-Id-Version: nvidia-install.sh 2.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-09 00:00+0000\n"
"PO-Revision-Date: 2025-07-09 00:00+0000\n"
"Last-Translator: Gemini <>\n"
"Language-Team: English <>\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "exit.handler.receive_signal"
msgstr "Received signal:"

msgid "exit.handler.exit_code"
msgstr "Exit code:"

msgid "exit.handler.script_interrupted"
msgstr "Script interrupted by signal:"

msgid "exit.handler.state_saved_for_resume"
msgstr "Installation state saved. You can try to resume on the next run."

msgid "exit.handler.temp_files_starting"
msgstr "Cleaning up temporary files..."

msgid "clean.release_lock_file"
msgstr "Releasing lock file:"

msgid "state.lock.error.another_install_running"
msgstr "Another installation process is running (PID:"

msgid "state.lock.cleaning_orphaned_file"
msgstr "Cleaning up orphaned lock file..."

msgid "state.lock.created"
msgstr "Install lock created:"

msgid "exit.code.prompt"
msgstr "Exit code:"

msgid "exit_code.success"
msgstr "Operation successful"

msgid "exit_code.permission"
msgstr "Permission and environment errors (1-9):"

msgid "exit_code.permission.no_root"
msgstr "Root privileges are required"

msgid "exit_code.permission.fs_denied"
msgstr "Insufficient file system permissions"

msgid "exit_code.permission.state_dir_failed"
msgstr "Failed to create state directory"

msgid "exit_code.hardware"
msgstr "Hardware Detection Error (10-19):"

msgid "exit_code.hardware.no_gpu_detected"
msgstr "No NVIDIA GPU detected"

msgid "exit_code.hardware.lspci_unavailable"
msgstr "lspci command unavailable"

msgid "exit_code.hardware.gpu_arch_incompatible"
msgstr "GPU architecture incompatible with selected modules"

msgid "exit_code.compatibility"
msgstr "System Compatibility Errors (20-29):"

msgid "exit_code.compatibility.unsupported_os"
msgstr "Unsupported operating system"

msgid "exit_code.compatibility.unsupported_version"
msgstr "Unsupported operating system version"

msgid "exit_code.compatibility.unsupported_arch"
msgstr "Unsupported system architecture"

msgid "exit_code.config"
msgstr "Parameter and Configuration Errors (30-39):"

msgid "exit_code.config.invalid_args"
msgstr "Invalid command-line arguments"

msgid "exit_code.config.invalid_install_type"
msgstr "Invalid installation type"

msgid "exit_code.config.module_arch_mismatch"
msgstr "Module and architecture mismatch"

msgid "exit_code.secure_boot"
msgstr "Secure Boot Errors (40-49):"

msgid "exit_code.secure_boot.user_exit"
msgstr "User chose to exit to handle Secure Boot"

msgid "exit_code.secure_boot.auto_failed"
msgstr "Secure Boot is enabled and cannot be handled automatically"

msgid "exit_code.secure_boot.mok_operation_failed"
msgstr "MOK key operation failed"

msgid "exit_code.secure_boot.mok_tools_missing"
msgstr "MOK tools are missing"

msgid "exit_code.conflict"
msgstr "Existing Driver Conflicts (50-59):"

msgid "exit_code.conflict.existing_driver_user_exit"
msgstr "User chose to exit due to existing driver"

msgid "exit_code.conflict.driver_uninstall_failed"
msgstr "Failed to uninstall existing driver"

msgid "exit_code.conflict.nouveau_disable_failed"
msgstr "Failed to disable nouveau driver"

msgid "exit_code.network"
msgstr "Network and Download Errors (60-69):"

msgid "exit_code.network.connection_failed"
msgstr "Network connection failed"

msgid "exit_code.network.repo_download_failed"
msgstr "Repository file download failed"

msgid "exit_code.network.keyring_download_failed"
msgstr "Keyring download failed"

msgid "exit_code.pkg_manager"
msgstr "Package Manager Errors (70-79):"

msgid "exit_code.pkg_manager.unavailable"
msgstr "Package manager unavailable"

msgid "exit_code.pkg_manager.repo_add_failed"
msgstr "Failed to add repository"

msgid "exit_code.pkg_manager.dependency_install_failed"
msgstr "Dependency installation failed"

msgid "exit_code.pkg_manager.kernel_headers_failed"
msgstr "Failed to install kernel headers"

msgid "exit_code.pkg_manager.nvidia_install_failed"
msgstr "Failed to install NVIDIA driver packages"

msgid "exit_code.system_state"
msgstr "System status error (80-89):"

msgid "exit_code.system_state.kernel_version_issue"
msgstr "Kernel version mismatch issue"

msgid "exit_code.system_state.dkms_build_failed"
msgstr "DKMS module build failed"

msgid "exit_code.system_state.module_signing_failed"
msgstr "Module signing failed"

msgid "exit_code.system_state.driver_verification_failed"
msgstr "Driver validation failed (nvidia-smi)"

msgid "exit_code.state_management"
msgstr "State management error (90-99):"

msgid "exit_code.state_management.rollback_file_missing"
msgstr "Rollback file is missing"

msgid "exit_code.state_management.rollback_failed"
msgstr "Rollback operation failed"

msgid "exit_code.state_management.state_file_corrupted"
msgstr "State file is corrupt or another instance is running"

msgid "exit_code.user_cancelled"
msgstr "Operation cancelled by user"

msgid "exit_code.unknown_code"
msgstr "Unknown error, exit code:"

msgid "auto_yes.prompt"
msgstr "Auto-yes mode, automatically confirming:"

msgid "select_option.prompt.range"
msgstr "Please enter your choice"

msgid "select_option.prompt.default"
msgstr "default"

msgid "select_option.prompt.invalid_choice"
msgstr "Invalid choice, please enter a number between"

msgid "args.error.invalid_module_type"
msgstr "Invalid module type:"

msgid "args.info.valid_types"
msgstr "Valid types are 'open' or 'proprietary'"

msgid "args.error.unknown_arg"
msgstr "Unknown argument:"

msgid "args.error.invalid_install_type"
msgstr "Invalid installation type."

msgid "args.info.auto_mode_enabled"
msgstr "Automation mode enabled."

msgid "args.info.quiet_mode_enabled"
msgstr "Quiet mode enabled."

msgid "state.dir.error.create_state_dir"
msgstr "Failed to create state directory:"

msgid "cleanup.failed.starting"
msgstr "Starting cleanup of previous failed installation state..."

msgid "cleanup.failed.previous_state_found"
msgstr "Found previous installation state file:"

msgid "cleanup.failed.confirm_cleanup"
msgstr "Do you want to delete these state files and start over?"

msgid "cleanup.failed.state_cleaned"
msgstr "State files have been cleaned up."

msgid "cleanup.failed.no_state_found"
msgstr "No failed installation state found, no cleanup needed."

msgid "cleanup.success.starting"
msgstr "Starting cleanup of post-installation state files..."

msgid "cleanup.success.state_file_deleted"
msgstr "Deleted state file:"

msgid "cleanup.success.rollback_file_deleted"
msgstr "Deleted rollback file:"

msgid "cleanup.success.all_states_cleaned"
msgstr "All state files have been cleaned up."

msgid "rollback.starting"
msgstr "Starting installation rollback..."

msgid "rollback.error.rollback_file_missing"
msgstr "Rollback file not found, cannot proceed:"

msgid "rollback.warning.changes_will_be_undone"
msgstr "This operation will undo the changes made during installation."

msgid "rollback.confirm.proceed"
msgstr "Are you sure you want to proceed with the rollback?"

msgid "rollback.info.executing"
msgstr "Executing rollback action:"

msgid "rollback.warning.partial_failure"
msgstr "Partial rollback failed, please check manually:"

msgid "rollback.error.partial_failure"
msgstr "Rollback did not complete successfully."

msgid "rollback.success"
msgstr "Rollback completed successfully."

msgid "rollback.error.user_cancelled"
msgstr "Rollback cancelled by user."

msgid "detect.os.starting"
msgstr "Detecting operating system..."

msgid "detect.os.error.unsupported_arch"
msgstr "Unsupported system architecture:"

msgid "detect.os.success"
msgstr "Detected operating system:"

msgid "detect.os.error.cannot_detect"
msgstr "Cannot detect operating system because /etc/os-release is missing."

msgid "detect.gpu.starting"
msgstr "Detecting NVIDIA GPU..."

msgid "detect.gpu.error.lspci_missing"
msgstr "\"lspci\" command not found. Please install pciutils."

msgid "detect.gpu.error.no_gpu_found"
msgstr "No NVIDIA GPU detected. Exiting script."

msgid "detect.gpu.success.detected"
msgstr "Detected GPU"

msgid "detect.gpu.success.support_open"
msgstr "supports open kernel modules."

msgid "detect.gpu.error.not_support_open"
msgstr "does not support open kernel modules, proprietary modules are required."

msgid "detect.gpu.info.use_proprietary"
msgstr "Will proceed with proprietary kernel modules."

msgid "detect.gpu.warning.unknown_device_id"
msgstr "Could not determine Device ID for this GPU. Defaulting to proprietary modules."

msgid "detect.gpu.old_gpu_found_warning"
msgstr "Detected older NVIDIA GPU that may be incompatible with open kernel modules."

msgid "detect.gpu.open_support_prompt"
msgstr "You have selected to install open modules (--modules open), but this requires a Turing (RTX 20 series) or newer architecture GPU."

msgid "detect.gpu.info.open_support_list"
msgstr "Architectures that support open modules: Turing, Ampere, Ada Lovelace, Blackwell"

msgid "detect.gpu.info.open_unsupport_list"
msgstr "Architectures that require proprietary modules: Maxwell, Pascal, Volta"

msgid "detect.gpu.incompatible.solution_prompt"
msgstr "We recommend switching to proprietary modules to ensure compatibility."

msgid "detect.gpu.incompatible.solution_option1"
msgstr "1. (Recommended) Automatically switch to proprietary modules and continue."

msgid "detect.gpu.incompatible.solution_option2"
msgstr "2. Attempt to use open modules anyway (may cause installation to fail)."

msgid "detect.gpu.incompatible.confirm"
msgstr "Switch to proprietary kernel modules for installation?"

msgid "detect.gpu.incompatible.switch"
msgstr "Switched to proprietary kernel modules."

msgid "detect.gpu.incompatible.continue_warning"
msgstr "Continuing with open kernel modules. If installation fails, please re-run and select proprietary modules."

msgid "detect.gpu.incompatible.auto_mode_switch"
msgstr "Automation mode: Incompatible GPU detected. Automatically switching to proprietary modules."

msgid "detect.gpu.summary.header"
msgstr "GPU Detection Summary"

msgid "detect.gpu.summary.header.gpu_number"
msgstr "GPU #"

msgid "detect.gpu.summary.header.architecture"
msgstr "Architecture"

msgid "detect.gpu.summary.header.module_type"
msgstr "Module Type"

msgid "detect.gpu.summary.value.open_module"
msgstr "Open"

msgid "detect.gpu.summary.value.proprietary_module_fallback"
msgstr "Proprietary (Fallback)"

msgid "detect.gpu.summary.value.proprietary_module"
msgstr "Proprietary"

msgid "detect.gpu.summary.note.fallback"
msgstr "Note: Switched to proprietary modules due to detection of an incompatible GPU."

msgid "detect.distro_support.starting"
msgstr "Checking OS support..."

msgid "detect.distro_support.warning.rhel7_eol"
msgstr "RHEL 7 is near End-Of-Life (EOL), support may be limited."

msgid "detect.distro_support.error.unsupported_rhel_version"
msgstr "Unsupported RHEL/compatible release version:"

msgid "detect.distro_support.warning.fedora_unofficial"
msgstr "version may require manual adjustments, not officially fully supported."

msgid "detect.distro_support.error.fedora_incompatible"
msgstr "version is incompatible with official NVIDIA repositories."

msgid "detect.distro_support.warning.ubuntu1804_eol"
msgstr "Ubuntu 18.04 standard support has ended, support may be limited."

msgid "detect.distro_support.warning.ubuntu_maybe_supported"
msgstr "This Ubuntu version may be supported, but has not been fully tested by the script:"

msgid "detect.distro_support.warning.ubuntu_unspecified"
msgstr "Unknown Ubuntu version, will attempt to continue:"

msgid "detect.distro_support.warning.debian11_needs_tuning"
msgstr "Support for Debian 11 may require manual adjustments."

msgid "detect.distro_support.warning.debian_unspecified"
msgstr "Unknown Debian version, will attempt to continue:"

msgid "detect.distro_support.warning.suse_maybe_supported"
msgstr "This SUSE version may be supported, but has not been fully tested by the script:"

msgid "detect.distro_support.warning.amzn2_needs_tuning"
msgstr "Support for Amazon Linux 2 may require manual adjustments."

msgid "detect.distro_support.error.unsupported_amzn_version"
msgstr "Unsupported Amazon Linux version:"

msgid "detect.distro_support.warning.azure_maybe_supported"
msgstr "This Azure Linux version may be supported, but has not been fully tested by the script:"

msgid "detect.distro_support.error.unsupported_kylin_version"
msgstr "Unsupported KylinOS version."

msgid "detect.distro_support.error.unknown_distro"
msgstr "Unknown and unsupported distribution:"

msgid "detect.distro_support.success.fully_supported"
msgstr "Operating system passed compatibility check:"

msgid "detect.distro_support.warning.partially_supported"
msgstr "Partially supported or untested operating system:"

msgid "detect.distro_support.prompt.confirm.continue_install"
msgstr "Installation may fail. Do you want to continue?"

msgid "detect.distro_support.user_cancelled"
msgstr "User cancelled installation after OS compatibility check."

msgid "detect.distro_support.error.unsupported"
msgstr "This operating system is not supported:"

msgid "detect.distro_support.info.supported_list_header"
msgstr "The script currently supports the following systems:"

msgid "detect.distro_support.prompt.confirm.force_install"
msgstr "Do you want to force an installation attempt? (Not recommended)"

msgid "detect.distro_support.warning.force_mode_issues"
msgstr "Force mode: The installation process may encounter unknown issues."

msgid "detect.existing_driver.skipping_check"
msgstr "Skipping check for existing drivers."

msgid "detect.existing_driver.starting"
msgstr "Checking for existing NVIDIA driver installations..."

msgid "detect.existing_driver.warning.kernel_module_loaded"
msgstr "Detected active NVIDIA kernel module:"

msgid "detect.existing_driver.warning.pkg_manager_install"
msgstr "Detected NVIDIA drivers installed via package manager:"

msgid "detect.existing_driver.warning.runfile_install"
msgstr "Detected NVIDIA driver installed via .run file."

msgid "detect.existing_driver.warning.ppa_found"
msgstr "Detected graphics-drivers PPA source (ppa:graphics-drivers)."

msgid "detect.existing_driver.warning.rpm_fusion_found"
msgstr "Detected RPM Fusion repository, which may contain NVIDIA drivers."

msgid "detect.existing_driver.error.driver_found"
msgstr "An existing NVIDIA driver installation was detected on the system."

msgid "detect.existing_driver.info.install_method"
msgstr "Possible installation method(s):"

msgid "detect.existing_driver.prompt.user_choice"
msgstr "Suggested Actions:\n1. Uninstall existing driver and reinstall (Recommended)\n2. Force reinstallation (May cause conflicts)\n3. Skip check and continue installation (Advanced users)\n4. Exit installer"

msgid "prompt.select_option.please_select"
msgstr "Please select an option:"

msgid "prompt.select_option.existing_driver.choice_uninstall"
msgstr "Automatically uninstall existing drivers and continue (Recommended)"

msgid "prompt.select_option.existing_driver.choice_force"
msgstr "Force re-installation (overwrite existing drivers)"

msgid "prompt.select_option.existing_driver.choice_skip"
msgstr "Skip this check and continue (unsafe)"

msgid "prompt.select_option.existing_driver.choice_exit"
msgstr "Exit script"

msgid "detect.existing_driver.warning.force_reinstall_mode"
msgstr "Force re-installation mode selected."

msgid "detect.existing_driver.warning.skip_mode"
msgstr "Skipping checks. Proceed at your own risk."

msgid "detect.existing_driver.exit.user_choice"
msgstr "User chose to exit due to existing driver."

msgid "detect.existing_driver.warning.auto_mode_uninstall"
msgstr "Automation mode: Will automatically uninstall existing drivers."

msgid "detect.existing_driver.warning.force_mode_skip_uninstall"
msgstr "Force mode: Skipping uninstall, will attempt to overwrite."

msgid "detect.existing_driver.success.no_driver_found"
msgstr "No existing NVIDIA drivers detected."

msgid "uninstall.existing_driver.starting"
msgstr "Starting uninstallation of existing NVIDIA drivers..."

msgid "uninstall.existing_driver.info.using_runfile_uninstaller"
msgstr "Using nvidia-uninstall to remove .run file installation..."

msgid "uninstall.existing_driver.warning.runfile_uninstall_incomplete"
msgstr ".run file driver uninstallation may be incomplete."

msgid "uninstall.existing_driver.info.removing_kernel_modules"
msgstr "Removing active NVIDIA kernel modules..."

msgid "uninstall.existing_driver.warning.module_removal_failed"
msgstr "Failed to remove some kernel modules. A reboot may be required."

msgid "uninstall.existing_driver.success"
msgstr "Existing NVIDIA drivers have been uninstalled."

msgid "secure_boot.check.starting"
msgstr "Checking Secure Boot status..."

msgid "secure_boot.check.method"
msgstr "detection method"

msgid "secure_boot.check.warning"
msgstr "Secure Boot is Enabled"

msgid "secure_boot.check.disabled_or_unsupported"
msgstr "Secure Boot is disabled or not supported on this system."

msgid "secure_boot.enabled.error_detected"
msgstr "Secure Boot is detected as enabled on your system."

msgid "secure_boot.enabled.why_is_problem"
msgstr "Why is this a problem?"

msgid "secure_boot.enabled.why_is_problem_detail"
msgstr "1. Secure Boot prevents unsigned kernel modules from loading.\n2. The NVIDIA driver contains kernel modules that must be signed to load.\n3. Even if installed successfully, the driver will not work, causing:\n   • Black screens or graphical display issues.\n   • CUDA/OpenCL to be unavailable.\n   • Multi-monitor setups to fail.\n   • The system may not boot."

msgid "secure_boot.enabled.solutions"
msgstr "Solutions"

msgid "secure_boot.enabled.solution.disable"
msgstr "Option 1 (Easiest): Disable Secure Boot in your system's UEFI/BIOS settings."

msgid "secure_boot.enabled.solution.disable_steps"
msgstr "1. Reboot and enter your BIOS/UEFI settings.\n2. Find the 'Security' or 'Boot' options.\n3. Disable the 'Secure Boot' feature.\n4. Save changes and reboot.\n5. Rerun this script."

msgid "secure_boot.enabled.solution.sign"
msgstr "Option 2 (Recommended): Generate a Machine Owner Key (MOK) and use it to sign the NVIDIA kernel modules."

msgid "secure_boot.enabled.solution.sign_steps"
msgstr "1. Install necessary tools: mokutil, openssl, dkms.\n2. Generate a Machine Owner Key (MOK).\n3. Enroll the MOK into the UEFI firmware.\n4. Configure DKMS to automatically sign NVIDIA modules.\n5. Rerun this script."

msgid "secure_boot.enabled.solution.prebuilt"
msgstr "Option 3 (Distro-specific): Use pre-built and signed drivers provided by your distribution."

msgid "secure_boot.enabled.solution.prebuilt_steps"
msgstr "Some distributions provide pre-signed NVIDIA drivers:\n• Ubuntu: Signed drivers may be available via 'ubuntu-drivers'.\n• RHEL: Pre-compiled signed modules may be available.\n• SUSE: May be available through the official repositories."

msgid "secure_boot.enabled.solution.mok_setup"
msgstr "MOK Enrollment Process Reminder"

msgid "secure_boot.enabled.solution.mok_setup_notice"
msgstr "This script can assist with MOK configuration, but it requires you to:\n• Manually confirm the MOK enrollment upon reboot.\n• Remember the password you have set.\n• Understand the security implications of Secure Boot."

msgid "secure_boot.enabled.sign.detected"
msgstr "Existing MOK key detected. Will attempt to use it for signing."

msgid "secure_boot.enabled.advice_footer"
msgstr "Please disable Secure Boot or be prepared to sign modules before continuing"

msgid "secure_boot.enabled.choose_action.prompt"
msgstr "Please select an action:\n1. Exit installer, I will resolve the Secure Boot issue manually.\n2. Help me configure a MOK key (For advanced users).\n3. Force the installation to continue (Not recommended, may lead to system issues)."

msgid "secure_boot.enabled.choice.exit"
msgstr "Exit the script, I will handle it manually (e.g., disable Secure Boot)."

msgid "secure_boot.enabled.choice.sign"
msgstr "Attempt to automatically generate and enroll a MOK key for signing (Recommended)."

msgid "secure_boot.enabled.choice.force"
msgstr "Ignore this warning and continue installation (the driver WILL NOT load!)."

msgid "secure_boot.enabled.exit.cancelled_user_fix"
msgstr "Script has exited. Please re-run after disabling Secure Boot or preparing for signing."

msgid "secure_boot.enabled.exit.useful_commands"
msgstr "Useful commands:\n• Check Secure Boot status: mokutil --sb-state\n• List enrolled MOK keys: mokutil --list-enrolled\n• Check for NVIDIA modules: lsmod | grep nvidia"

msgid "secure_boot.enabled.exit.user_choice"
msgstr "User chose to handle the Secure Boot issue manually."

msgid "secure_boot.enabled.warning.user_forced_install"
msgstr "User forced to continue installation. The NVIDIA driver will likely FAIL to load after reboot!"

msgid "secure_boot.enabled.warning.auto_mode_existing_mok"
msgstr "Automation mode: Secure Boot and an existing MOK were detected. Continuing installation."

msgid "secure_boot.enabled.error.auto_mode_failure"
msgstr "Automation mode failed: Secure Boot is enabled but no MOK is available. Please disable Secure Boot or create a MOK manually."

msgid "mok.setup.starting"
msgstr "Starting MOK key setup for module signing..."

msgid "mok.setup.error.tools_missing"
msgstr "Required tools are missing:"

msgid "mok.setup.error.please_install_tools"
msgstr "Please install them first. For example:"

msgid "mok.setup.info.using_ubuntu_key"
msgstr "Detected and using existing system MOK key at /var/lib/shim-signed/mok/..."

msgid "mok.setup.info.using_dkms_key"
msgstr "Detected and using existing DKMS MOK key at /var/lib/dkms/..."

msgid "mok.setup.info.generating_new_key"
msgstr "No existing MOK key found, generating a new one..."

msgid "mok.setup.error.generation_failed"
msgstr "MOK key generation failed."

msgid "mok.setup.success.generation_complete"
msgstr "New MOK key generated and saved in /var/lib/dkms/"

msgid "mok.setup.info.enrolling_key"
msgstr "Enrolling the MOK key into the system's boot firmware..."

msgid "mok.setup.enroll.important_note_header"
msgstr "!!! IMPORTANT ACTION: Please set a temporary password !!!"

msgid "mok.setup.enroll.note"
msgstr "1. You will be prompted to set a one-time password.\n2. Please remember this password, as it is required on reboot.\n3. A simple numeric password is recommended to avoid keyboard layout issues."

msgid "mok.setup.error.enroll_failed"
msgstr "MOK key enrollment failed. \"mokutil --import\" command failed."

msgid "mok.setup.success.enroll_queued"
msgstr "MOK key enrollment has been requested."

msgid "mok.setup.next_steps.header"
msgstr "NEXT STEP: REBOOT and ENROLL KEY"

msgid "mok.setup.enroll.next_steps"
msgstr "1. After the script finishes, the system will reboot.\n2. The MOK Manager screen will appear during startup.\n3. Select 'Enroll MOK'.\n4. Select 'Continue'.\n5. Select 'Yes'.\n6. Enter the password you set earlier.\n7. The system will reboot again."

msgid "mok.setup.next_steps.warning_english_interface"
msgstr "NOTE: The MOK management interface is usually in English."

msgid "dkms.signing.configuring"
msgstr "Configuring DKMS for automatic signing..."

msgid "dkms.signing.success"
msgstr "DKMS signing configured successfully."

msgid "pre_check.starting"
msgstr "Performing pre-installation checks..."

msgid "root.partition.space.insufficient"
msgstr "Root partition has less than 1GB of free space. Installation may fail."

msgid "pre_check.warning.vm_detected"
msgstr "Detected running inside a virtual machine:"

msgid "pre_check.vm.note"
msgstr "Important Notes:\n• Ensure 3D acceleration is enabled for the virtual machine.\n• Some virtual machine platforms may not support NVIDIA GPU passthrough.\n• Container environments may require special configuration."

msgid "pre_check.warning.custom_kernel_detected"
msgstr "Detected custom kernel:"

msgid "pre_check.custom_kernel.note"
msgstr "Using a custom kernel might require additional configuration for the driver modules to build successfully."

msgid "pre_check.success"
msgstr "Pre-installation checks completed."

msgid "repo.add.exists"
msgstr "repository already exists, skipping."

msgid "repo.add.adding"
msgstr "Adding repository:"

msgid "pkg_install.info.installing_missing"
msgstr "Installing missing packages:"

msgid "pkg_install.info.all_packages_exist"
msgstr "All necessary dependency packages are already installed."

msgid "repo.enable.already_done"
msgstr "Repositories and dependencies already enabled, skipping this step."

msgid "repo.enable.starting"
msgstr "Enabling third-party repositories and dependencies..."

msgid "repo.enable.error.rhel_appstream"
msgstr "Failed to enable RHEL AppStream repository."

msgid "repo.enable.error.rhel_baseos"
msgstr "Failed to enable RHEL BaseOS repository."

msgid "repo.enable.error.rhel_crb"
msgstr "Failed to enable RHEL CodeReady Builder (CRB) repository."

msgid "repo.enable.error.suse_packagehub"
msgstr "Failed to enable SUSE PackageHub."

msgid "kernel_headers.install.already_done"
msgstr "Kernel headers already installed, skipping this step."

msgid "kernel_headers.install.starting"
msgstr "Installing kernel headers and development packages..."

msgid "repo.local.setup.starting"
msgstr "Setting up local NVIDIA repository..."

msgid "repo.local.setup.downloading"
msgstr "Downloading:"

msgid "repo.network.setup.starting"
msgstr "Setting up network NVIDIA repository..."

msgid "repo.network.setup.installing_keyring"
msgstr "Downloading and installing NVIDIA GPG keyring..."

msgid "repo.network.setup.keyring_exists"
msgstr "NVIDIA keyring is already installed."

msgid "repo.nvidia.add.already_done"
msgstr "NVIDIA repository already added, skipping this step."

msgid "repo.nvidia.add.starting"
msgstr "Adding official NVIDIA repository..."

msgid "dnf_module.enable.starting"
msgstr "Enabling DNF module stream..."

msgid "nvidia_driver.install.starting"
msgstr "Starting NVIDIA driver installation"

msgid "nvidia_driver.type.open"
msgstr "Open Modules"

msgid "nvidia_driver.type.proprietary"
msgstr "Proprietary Modules"

msgid "nouveau.disable.starting"
msgstr "Disabling nouveau driver..."

msgid "nouveau.disable.warning.detected_running"
msgstr "The nouveau kernel module is currently loaded."

msgid "nouveau.disable.warning.processes_using_drm"
msgstr "processes may be using DRM device. Attempting to stop the display manager."

msgid "nouveau.disable.info.stopping_display_manager"
msgstr "Attempting to stop display manager to release nouveau..."

msgid "nouveau.disable.info.stop_display_manager"
msgstr "Stopping"

msgid "nouveau.disable.warning.failed_stopping_display_manager"
msgstr "Failed to stop display manager:"

msgid "nouveau.disable.info.switching_to_text_mode"
msgstr "Switching to multi-user text mode..."

msgid "nouveau.disable.info.unloading_module"
msgstr "Attempting to unload nouveau kernel module..."

msgid "nouveau.disable.info.unload_module"
msgstr "Unloading module"

msgid "nouveau.disable.success.module_unloaded"
msgstr "Module unloaded:"

msgid "nouveau.disable.warning.module_unload_failed"
msgstr "Failed to unload module:"

msgid "nouveau.disable.error.still_running_reboot_needed"
msgstr "Could not unload the nouveau module as it is still in use. A reboot is required."

msgid "nouveau.disable.success.module_unloaded_all"
msgstr "nouveau module successfully unloaded."

msgid "nouveau.disable.info.not_running"
msgstr "nouveau module is not running."

msgid "nouveau.disable.info.creating_blacklist"
msgstr "Creating modprobe blacklist file to disable nouveau..."

msgid "nouveau.disable.info.updating_initramfs"
msgstr "Updating initramfs/initrd image..."

msgid "nouveau.disable.warning.initramfs_update_failed"
msgstr "Failed to update initramfs."

msgid "nouveau.disable.warning.dracut_missing"
msgstr "\"dracut\" command not found, cannot update initramfs."

msgid "nouveau.disable.info.restarting_display_manager"
msgstr "Attempting to restore the display manager..."

msgid "nouveau.disable.info.restart_display_manager"
msgstr "Restarting"

msgid "nouveau.disable.warning.restart_failed"
msgstr "restart failed"

msgid "nouveau.disable.warning.reboot_required_final"
msgstr "A reboot is required to disable nouveau."

msgid "nouveau.disable.error.reboot_needed_header"
msgstr "!!! REBOOT REQUIRED TO CONTINUE INSTALLATION !!!"

msgid "nouveau.disable.error.reboot_needed_note"
msgstr "The nouveau driver is still in use. A system reboot is required before NVIDIA driver installation can continue.\nThis usually happens when:\n• A graphical application is using the nouveau driver.\n• The nouveau module is a dependency for another loaded module.\n• The system is currently running in a graphical session."

msgid "nouveau.disable.info.auto_mode_reboot"
msgstr "Automation mode: The system will now reboot to disable nouveau."

msgid "nouveau.disable.confirm.reboot_now"
msgstr "Reboot the system now?"

msgid "nouveau.disable.info.rebooting_now"
msgstr "Rebooting..."

msgid "nouveau.disable.exit.user_refused_reboot"
msgstr "User refused to reboot. Cannot continue installation."

msgid "nouveau.disable.success.continue_install"
msgstr "nouveau has been disabled. Continuing with installation."

msgid "persistence_daemon.enable.starting"
msgstr "Enabling NVIDIA Persistence Daemon..."

msgid "persistence_daemon.enable.success"
msgstr "NVIDIA Persistence Daemon enabled."

msgid "persistence_daemon.enable.warning.service_not_found"
msgstr "nvidia-persistenced service not found."

msgid "verify.starting"
msgstr "Verifying installation..."

msgid "verify.success.driver_loaded"
msgstr "NVIDIA driver is loaded. Version info:"

msgid "verify.warning.module_not_loaded"
msgstr "NVIDIA kernel module is not loaded. A reboot may be required."

msgid "verify.success.smi_available"
msgstr "nvidia-smi command is available."

msgid "verify.info.testing_driver"
msgstr "Testing driver..."

msgid "verify.success.driver_working"
msgstr "Driver is working correctly!"

msgid "verify.error.smi_failed"
msgstr "nvidia-smi command failed to execute. The driver may not be loaded correctly. A reboot is required."

msgid "verify.warning.smi_unavailable"
msgstr "nvidia-smi command is not available. A reboot may be required."

msgid "verify.info.loaded_modules"
msgstr "Loaded NVIDIA modules:"

msgid "verify.info.module_version"
msgstr "Module version:"

msgid "common.unknown"
msgstr "Unknown"

msgid "cleanup.install_files.starting"
msgstr "Cleaning up installation files..."

msgid "final.success.header"
msgstr "🎉 NVIDIA Driver Installed Successfully! 🎉"

msgid "final.summary.header"
msgstr "Installation Summary"

msgid "final.summary.distro"
msgstr "Distribution"

msgid "final.summary.arch"
msgstr "Architecture"

msgid "final.summary.module_type"
msgstr "Module Type"

msgid "module.type.open_kernel"
msgstr "Open Kernel Modules"

msgid "module.type.proprietary_kernel"
msgstr "Proprietary Kernel Modules"

msgid "repo.type.local"
msgstr "Local"

msgid "repo.type.network"
msgstr "Network"

msgid "final.next_steps.header"
msgstr "Next Steps"

msgid "final.next_steps.working.note"
msgstr "1. ✅ The driver is working correctly. You can start using your NVIDIA GPU now.\n2. To install the CUDA Toolkit, please visit: https://docs.nvidia.com/cuda/cuda-installation-guide-linux/\n3. For technical support, visit the forums: https://forums.developer.nvidia.com/c/gpu-graphics/linux/148\n4. If you encounter issues, you can roll back the installation by running"

msgid "final.next_steps.not_working.note"
msgstr "1. Reboot the system to ensure the driver is fully loaded.\n2. After rebooting, run 'nvidia-smi' to verify the installation.\n3. To install the CUDA Toolkit, please visit: https://docs.nvidia.com/cuda/cuda-installation-guide-linux/\n4. For technical support, visit the forums: https://forums.developer.nvidia.com/c/gpu-graphics/linux/148\n5. If you encounter issues, you can roll back the installation by running"

msgid "final.next_steps.secure_boot.header"
msgstr "Secure Boot Note"

msgid "final.next_steps.secure_boot.working"
msgstr "Your system has Secure Boot enabled, and the driver is working correctly. This indicates that module signing was successful."

msgid "final.next_steps.secure_boot.error"
msgstr "6. If the MOK Manager screen appears on reboot, select 'Enroll MOK' and enter your password.\n7. If the driver fails to load, check kernel messages with: sudo dmesg | grep nvidia\n8. To verify the module's signature, run: modinfo nvidia | grep sig"

msgid "final.notes.compute.header"
msgstr "Notes for Compute-Only Installation"

msgid "final.notes.compute.notes"
msgstr "- This installation does not include desktop graphics components (e.g., OpenGL, Vulkan, X driver).\n- It is intended for compute clusters or headless workstations.\n- To add desktop functionality, you can install the required packages separately later."

msgid "final.notes.desktop.header"
msgstr "Notes for Desktop-Only Installation"

msgid "final.notes.desktop.notes"
msgstr "- This installation does not include the CUDA compute components.\n- It is intended for general desktop and gaming purposes.\n- For CUDA support, you can install the 'nvidia-driver-cuda' package later."

msgid "permission.error.root_required"
msgstr "This script must be run as root. Please use"

msgid "main.info.non_interactive_quiet_mode"
msgstr "Non-interactive terminal detected. Enabling quiet mode automatically."

msgid "main.header.title"
msgstr "NVIDIA Driver One-Click Installer"

msgid "main.header.auto_mode_subtitle"
msgstr "(Automated Installation Mode)"

msgid "main.resume.warning_incomplete_state_found"
msgstr "Incomplete installation state found. Last completed step:"

msgid "main.resume.confirm_resume_install"
msgstr "Do you want to attempt to resume the installation from this step? (Selecting 'N' will start over)"

msgid "main.resume.info_resuming"
msgstr "Resuming installation..."

msgid "main.resume.info_restarting"
msgstr "Restarting installation from the beginning..."

msgid "main.config_summary.header"
msgstr "Installation Configuration Summary"

msgid "main.config_summary.distro"
msgstr "System:"

msgid "main.config_summary.module_type"
msgstr "Module Type:"

msgid "main.config_summary.install_type"
msgstr "Install Type:"

msgid "main.config_summary.repo_type"
msgstr "Repository:"

msgid "repo.type.local"
msgstr "Local"

msgid "repo.type.network"
msgstr "Network"

msgid "main.config_summary.auto_mode"
msgstr "Auto Mode:"

msgid "common.yes"
msgstr "Yes"

msgid "common.no"
msgstr "No"

msgid "main.config_summary.force_reinstall"
msgstr "Force Reinstall:"

msgid "main.config_summary.auto_reboot"
msgstr "Auto Reboot:"

msgid "main.config_summary.confirm"
msgstr "Confirm the above configuration and start the installation?"

msgid "main.config_summary.user_cancel"
msgstr "Installation cancelled by user."

msgid "main.install.starting"
msgstr "Installation process starting..."

msgid "main.reboot_logic.success_no_reboot_needed"
msgstr "Installation complete. Driver loaded successfully, no reboot needed!"

msgid "main.reboot_logic.success_smi_passed"
msgstr "\"nvidia-smi\" verification passed. Your GPU is ready."

msgid "main.reboot_logic.info_rebooting_on_user_request"
msgstr "Rebooting now as per your request (--auto-reboot)."

msgid "main.reboot_logic.info_rebooting_now"
msgstr "Rebooting..."

msgid "main.reboot_logic.success_auto_mode_no_reboot"
msgstr "Automated installation successful, no reboot required."

msgid "main.reboot_logic.confirm_optional_reboot"
msgstr "Do you want to reboot to ensure all system services are running correctly? (Optional)"

msgid "main.reboot_logic.info_reboot_skipped"
msgstr "Reboot skipped."

msgid "main.reboot_logic.warning_reboot_required"
msgstr "Installation complete, but a reboot is required for the driver to take effect."

msgid "main.reboot_logic.warning_smi_failed_reboot_required"
msgstr "\"nvidia-smi\" verification failed, indicating the driver is not loaded correctly."

msgid "main.reboot_logic.reason_nouveau"
msgstr "Reason: A reboot is needed to completely disable the nouveau driver."

msgid "main.reboot_logic.reason_module_load"
msgstr "Reason: A reboot is needed to load the new kernel modules."

msgid "main.reboot_logic.info_auto_mode_rebooting"
msgstr "Automation mode: System requires a reboot and will proceed now."

msgid "main.reboot_logic.confirm_reboot_now"
msgstr "Reboot now?"

msgid "main.reboot_logic.warning_manual_reboot_needed"
msgstr "User chose to reboot later. Please reboot your system manually."

msgid "main.reboot_logic.info_verify_after_reboot"
msgstr "After rebooting, you can use the \"nvidia-smi\" command to verify that the driver is working correctly."
